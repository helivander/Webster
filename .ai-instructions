# Webster Project - AI Instructions

## üéØ Vis√£o Geral do Projeto
O Webster √© uma aplica√ß√£o full-stack para cria√ß√£o e gerenciamento de encartes digitais e impressos, com foco em supermercados e varejo.

## üèóÔ∏è Arquitetura do Projeto

### Backend (NestJS + Prisma)
- **Localiza√ß√£o**: `/server/`
- **Framework**: NestJS com TypeScript
- **Banco de dados**: PostgreSQL com Prisma ORM
- **Autentica√ß√£o**: JWT com Passport
- **Estrutura**: Modular (modules/auth, modules/canvas, etc.)

### Frontend (React + Vite)
- **Localiza√ß√£o**: `/client/`
- **Framework**: React com TypeScript
- **Build tool**: Vite
- **Estado**: Redux Toolkit
- **UI**: Componentes customizados

### Banco de Dados
- **Schema**: `/server/src/prisma/schema.prisma` (√öNICO schema v√°lido)
- **Migra√ß√µes**: `/server/src/prisma/migrations/`

## üìÅ Estrutura de Diret√≥rios

```
Webster/
‚îú‚îÄ‚îÄ server/                 # Backend NestJS
‚îÇ   ‚îú‚îÄ‚îÄ src/
‚îÇ   ‚îÇ   ‚îú‚îÄ‚îÄ modules/       # M√≥dulos da aplica√ß√£o
‚îÇ   ‚îÇ   ‚îú‚îÄ‚îÄ prisma/        # Schema e migra√ß√µes
‚îÇ   ‚îÇ   ‚îú‚îÄ‚îÄ shared/        # Utilit√°rios compartilhados
‚îÇ   ‚îÇ   ‚îî‚îÄ‚îÄ common/        # Guards, interceptors, etc.
‚îÇ   ‚îî‚îÄ‚îÄ package.json
‚îú‚îÄ‚îÄ client/                # Frontend React
‚îÇ   ‚îú‚îÄ‚îÄ src/
‚îÇ   ‚îÇ   ‚îú‚îÄ‚îÄ components/    # Componentes React
‚îÇ   ‚îÇ   ‚îú‚îÄ‚îÄ store/         # Redux store
‚îÇ   ‚îÇ   ‚îî‚îÄ‚îÄ utils/         # Utilit√°rios
‚îÇ   ‚îî‚îÄ‚îÄ package.json
‚îî‚îÄ‚îÄ README.md
```

## üé® Padr√µes de C√≥digo

### Backend (NestJS)
- **DTOs**: Sempre usar class-validator e class-transformer
- **Responses**: Usar DTOs espec√≠ficos para responses (ex: UserResponseDto)
- **Modules**: Estrutura modular clara (controller, service, module)
- **Prisma**: 
  - Schema em `/server/src/prisma/schema.prisma`
  - Sempre gerar client ap√≥s mudan√ßas: `npx prisma generate --schema ./src/prisma/schema.prisma`
  - Migra√ß√µes: `npx prisma migrate dev --schema ./src/prisma/schema.prisma`

### Frontend (React)
- **Componentes**: Functional components com hooks
- **Estado**: Redux Toolkit para estado global
- **Tipagem**: TypeScript rigoroso
- **Estilo**: CSS modules ou styled-components

## üîß Comandos Importantes

### Backend
```bash
cd server
npm yarn dev          # Desenvolvimento
npm yarn build        # Build para produ√ß√£o
npx prisma generate --schema ./src/prisma/schema.prisma  # Gerar client
npx prisma migrate dev --schema ./src/prisma/schema.prisma  # Migra√ß√£o
```

### Frontend
```bash
cd client
npm yarn dev          # Desenvolvimento
npm yarn build        # Build para produ√ß√£o
```

## üö® Regras Importantes

### ‚ùå N√ÉO FAZER:
1. **Nunca** criar schemas Prisma fora de `/server/src/prisma/`
2. **Nunca** duplicar depend√™ncias do Prisma na raiz
3. **Nunca** modificar o schema sem criar migra√ß√£o
4. **Nunca** usar `any` no TypeScript sem justificativa

### ‚úÖ SEMPRE FAZER:
1. **Sempre** usar DTOs para responses da API
2. **Sempre** validar inputs com class-validator
3. **Sempre** gerar Prisma client ap√≥s mudan√ßas no schema
4. **Sempre** usar TypeScript rigoroso
5. **Sempre** seguir a estrutura modular do NestJS

## üóÉÔ∏è Modelos do Banco de Dados

### User
```typescript
{
  id: string (UUID)
  email: string (unique)
  username: string
  password: string (hash)
  isEmailConfirmed: boolean
  companyId?: string
  foto?: string
  createdAt: DateTime
  updatedAt: DateTime
  deletedAt?: DateTime
  
  // Relacionamentos
  canvases: Canvas[]
  empresas: Empresa[]
  templates: Template[]
  encartes: Encarte[]
}
```

### Canvas
```typescript
{
  id: string (UUID)
  authorId: string (FK -> User)
  name: string
  description: string
  content: Json
  createdAt: DateTime
  updatedAt: DateTime
  
  // Relacionamentos
  author: User
}
```

### Marca
```typescript
{
  id: string (UUID)
  nome: string
  logo?: string
  descricao?: string
  createdAt: DateTime
  updatedAt: DateTime
  deletedAt?: DateTime
  
  // Relacionamentos
  produtos: Produto[]
}
```

### Produto
```typescript
{
  id: string (UUID)
  marcaId: string (FK -> Marca)
  nome: string
  preco: Decimal
  descricao?: string
  tags?: string
  adicional?: string
  foto1: string
  foto2?: string
  foto3?: string
  tipo: string
  barcode?: string
  codsys?: string
  descricaocurta?: string
  createdAt: DateTime
  updatedAt: DateTime
  deletedAt?: DateTime
  
  // Relacionamentos
  marca: Marca
  encarteItems: EncarteItem[]
  produtoUsos: ProdutoUso[]
}
```

### Template
```typescript
{
  id: string (UUID)
  nome: string
  largura: number
  altura: number
  quantImagem: number (default: 1)
  imgFundo?: string
  fonte?: string
  textoCabecalho?: string
  textoRodape?: string
  midia: TipoMidia (D | I | V)
  dpi?: number
  authorId: string (FK -> User)
  description?: string
  conteudoJson?: Json
  carimboPreco?: string
  carimboTituloProd?: string
  createdAt: DateTime
  updatedAt: DateTime
  deletedAt?: DateTime
  
  // Relacionamentos
  author: User
  encartes: Encarte[]
}
```

### Empresa
```typescript
{
  id: string (UUID)
  name: string
  cnpj: string (unique)
  address: string
  phone: string
  email: string
  logo?: string
  description?: string
  usuarioId: string (FK -> User)
  createdAt: DateTime
  updatedAt: DateTime
  deletedAt?: DateTime
  
  // Relacionamentos
  usuario: User
  encartes: Encarte[]
  produtoUsos: ProdutoUso[]
}
```

### Encarte
```typescript
{
  id: string (UUID)
  userId: string (FK -> User)
  modelId: string (FK -> Template)
  empresaId: string (FK -> Empresa)
  encarteJson?: Json
  avisosEncarte?: string
  createdAt: DateTime
  updatedAt: DateTime
  deletedAt?: DateTime
  
  // Relacionamentos
  user: User
  template: Template
  empresa: Empresa
  encarteItems: EncarteItem[]
}
```

### EncarteItem
```typescript
{
  id: string (UUID)
  produtoId: string (FK -> Produto)
  projetoId: string (FK -> Encarte)
  valor: Decimal
  valorPromo?: Decimal
  valorAntigo?: Decimal
  regraCompra?: string
  validadeProd?: Date
  createdAt: DateTime
  updatedAt: DateTime
  deletedAt?: DateTime
  
  // Relacionamentos
  produto: Produto
  encarte: Encarte
}
```

### ProdutoUso
```typescript
{
  id: string (UUID)
  ultimoValor: Decimal
  descPerson?: string
  produtoId: string (FK -> Produto)
  empresaId: string (FK -> Empresa)
  ultimoPreco: Decimal
  createdAt: DateTime
  updatedAt: DateTime
  deletedAt?: DateTime
  
  // Relacionamentos
  produto: Produto
  empresa: Empresa
}
```

### Enum TipoMidia
```typescript
enum TipoMidia {
  D // Digital
  I // Impresso  
  V // Video
}
```

## üîê Autentica√ß√£o
- JWT tokens
- Guards para prote√ß√£o de rotas
- Passport strategies

## üé® UI/UX
- Interface moderna e responsiva
- Foco na usabilidade para cria√ß√£o de encartes
- Componentes reutiliz√°veis

## üìù Conven√ß√µes de Nomenclatura
- **Arquivos**: kebab-case (user-response.dto.ts)
- **Classes**: PascalCase (UserResponseDto)
- **Vari√°veis**: camelCase (isEmailConfirmed)
- **Constantes**: UPPER_SNAKE_CASE (DATABASE_URL)

## üêõ Debug e Logs
- Winston para logging no backend
- Console.log apenas em desenvolvimento
- Tratamento adequado de erros

## üìö Documenta√ß√£o
- README.md atualizado
- Coment√°rios em c√≥digo complexo
- DTOs bem documentados

---

**Lembre-se**: Este √© um projeto de produ√ß√£o. Sempre priorize qualidade, seguran√ßa e manutenibilidade do c√≥digo. 

Consideracoes tecnicas sobre o projeto:

A ideia central dessa aplicacao seria os administradores criarem layouts de encartes contendo os seguintes elementos: 
* Plano de fundo do encarte
* Logo da empresa
* Produtos do encarte
* Campo de preco de cada produto
* Campo de preco antigo de cada produto
* Campo do nome do produto
* Selo para o preco do produto
* Selo para um produto destaque
* Campo para uma informacao adicional para cada produto

Com esse layout criado, os utilizadores do sistema teriam o seguinte fluxo de uso do sistema.
* Escolher o layout pronto que mais o agrada.
* Assim que o layout √© escolhido o mesmo √© aberto na tela do canvas ja aplicando a logo da empresa do usuario.
* Logo ap√≥s o usuario vai para a lista de produtos, previamente cadastrados, e clica no produto a sua escolha.
* Ao clicar nesse produto √© aberta uma popup para ele colocar os campos que o conv√©m, o nome do produto √© algo fixo,
  o usuario nao pode mexer nesse campo, mas campos como preco, preco antigo e informacao adicional √© oferecido nesse
  popup e ser√° exibido tamb√©m as tres fotos do produto na popup listadas para o mesmo escolher qual lhe agrada.
* Ao clicar em confirmar o produto vai para dentro do layout ja obedecendo os atributos do criador do layout como
  x, y, fontSize, fill, fontFamily, taxado, underline, e outros atributos para os elementos de textos, 
  os elementos de x, y, width, height, src, opacity, angle.
* O usu√°rio tera um maximo de produtos para por em cada layout, esse maximo sera definido pelo criador do layout, que
  ser√° os administradores do sistema.
* Assim como os produtos, a logo da empresa ira para o layout ja posicionada dentro da sua grade predefinida pelo criador
  do layout e coisas como opacidade tamanho angulo serao todos travados.
*

No exemplo abaixo √© ilustrado alguns elementos que compoem cada objeto que vai fazer parte do canvas.
Esse √© o conceito que preciso abstrair para montar o projeto de forma que o usuario coloque seus campos mas mantendo os atributos.
[
  {
    "id": "text-1",
    "type": "text",
    "x": 100,
    "y": 150,
    "text": "Meu texto",
    "fontSize": 24,
    "fill": "#000000",
    "fontFamily": "Arial"
  },
  {
    "id": "image-1",
    "type": "image",
    "x": 200,
    "y": 300,
    "width": 150,
    "height": 100,
    "src": "https://exemplo.com/imagem.jpg" //coringa-logo
  }
]

Para futura implementacao:
Insira um botao de adicionar logo do encarte na aba que se abre ao editar um model.
exibir esse botao de upload exiba tres modelos de tamanhos comuns de logos.
1:1 ou seja quadrada
1:3 logo retangular
4:3 logo vertical
Ai o usuario escolhe uma dessas e  essa logo de exemplo vai para o canvas, para ele definir a sua dimensao respeitando as proporcoes originais e localizacao no modelo